// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProductContent /> rendering when all relevant data is available inside the store should handle variant product updates 1`] = `
<Connect(ProductContent)
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={false}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_2",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when all relevant data is available inside the store should handle variant product updates 2`] = `
<Connect(ProductContent)
  productId="product_3"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={false}
    productId="product_3"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_3"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_3",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_3"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when all relevant data is available inside the store should render a product without variants 1`] = `
<Connect(ProductContent)
  productId="product_5"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_5"
    isVariant={false}
    productId="product_5"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_5",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_5"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_5"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_5"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_5"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_5"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_5"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when all relevant data is available inside the store should render a variant product 1`] = `
<Connect(ProductContent)
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={false}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_2",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products initialization with a variant product should initialize as expected when no data is available at all 1`] = `
<Connect(ProductContent)
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_2"
    isVariant={false}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_2",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_2"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_2"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_2"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_2"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_2"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products initialization with a variant product should render as expected when all data comes available 1`] = `
<Connect(ProductContent)
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={false}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_2",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products initialization with a variant product should render as expected when base product data came in but the rest is still fetching 1`] = `
<Connect(ProductContent)
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_2"
    isVariant={false}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_2",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_2"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_2"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_2"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_2"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_2"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products initialization with a variant product should render as expected when variant data came in but the variant product data is still fetching 1`] = `
<Connect(ProductContent)
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_2"
    isVariant={false}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_2",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_2"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_2"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_2"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_2"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_2"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products switch from a base product to a variant product whose data is not fetched yet should initialize with the base product 1`] = `
<Connect(ProductContent)
  productId="product_1"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={false}
    productId="product_1"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_1"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products switch from a base product to a variant product whose data is not fetched yet should render as expected when switching to the variant product whose data is not available yet 1`] = `
<Connect(ProductContent)
  isVariant={true}
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_2"
    isVariant={true}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_2",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products switch from a base product to a variant product whose data is not fetched yet should render as expected when the variant product data comes available 1`] = `
<Connect(ProductContent)
  isVariant={true}
  productId="product_2"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={true}
    productId="product_2"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_2",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products switch from one variant product to another one should initialize with the initial variant product 1`] = `
<Connect(ProductContent)
  productId="product_1"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  variantId="product_2"
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={false}
    productId="product_1"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_2",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_2"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_2"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products switch from one variant product to another one should render as expected when switching to another variant product whose data is not fetched yet 1`] = `
<Connect(ProductContent)
  isVariant={true}
  productId="product_3"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  variantId="product_2"
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={true}
    productId="product_3"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_3",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_3"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store products with variant products switch from one variant product to another one should render as expected when the variant product data comes available  1`] = `
<Connect(ProductContent)
  isVariant={true}
  productId="product_3"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  variantId="product_2"
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_1"
    isVariant={true}
    productId="product_3"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId="product_2"
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_1",
          "variantId": "product_3",
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_3"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Description>
        <Properties
          productId="product_1"
          variantId="product_3"
        >
          <div />
        </Properties>
        <Reviews
          productId="product_1"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store simple products initialization should initialize as expected when product data is not available yet 1`] = `
<Connect(ProductContent)
  productId="product_5"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_5"
    isVariant={false}
    productId="product_5"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_5",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_5"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_5"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_5"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_5"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_5"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_5"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;

exports[`<ProductContent /> rendering when product data is not available inside the store simple products initialization should update as expected when data became available 1`] = `
<Connect(ProductContent)
  productId="product_5"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ProductContent
    addToCart={[Function]}
    baseProductId="product_5"
    isVariant={false}
    productId="product_5"
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    variantId={null}
  >
    <Provider
      value={
        Object {
          "conditioner": Conditioner {
            "conditioners": Map {},
          },
          "options": Object {},
          "productId": "product_5",
          "variantId": null,
        }
      }
    >
      <div>
        <ImageSlider
          productId="product_5"
          variantId={null}
        >
          <div />
        </ImageSlider>
        <ProductHeader>
          <div />
        </ProductHeader>
        <Characteristics
          productId="product_5"
          variantId={null}
        >
          <div />
        </Characteristics>
        <Options
          currentOptions={Object {}}
          productId="product_5"
          storeSelection={[Function]}
        >
          <div />
        </Options>
        <Description
          productId="product_5"
          variantId={null}
        >
          <div />
        </Description>
        <Properties
          productId="product_5"
          variantId={null}
        >
          <div />
        </Properties>
        <Reviews
          productId="product_5"
        >
          <div />
        </Reviews>
        <TaxDisclaimer>
          <div />
        </TaxDisclaimer>
      </div>
    </Provider>
  </ProductContent>
</Connect(ProductContent)>
`;
